// Mocks generated by Mockito 5.2.0 from annotations
// in newquist_dev/test/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:newquist_dev/app_provider.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeThemeData_0 extends _i1.Fake implements _i2.ThemeData {
  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [AppProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppProvider extends _i1.Mock implements _i3.AppProvider {
  MockAppProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get section =>
      (super.noSuchMethod(Invocation.getter(#section), returnValue: '')
          as String);
  @override
  set section(String? value) =>
      super.noSuchMethod(Invocation.setter(#section, value),
          returnValueForMissingStub: null);
  @override
  _i2.ThemeData get theme => (super.noSuchMethod(Invocation.getter(#theme),
      returnValue: _FakeThemeData_0()) as _i2.ThemeData);
  @override
  set theme(_i2.ThemeData? theme) =>
      super.noSuchMethod(Invocation.setter(#theme, theme),
          returnValueForMissingStub: null);
  @override
  bool get showSplash =>
      (super.noSuchMethod(Invocation.getter(#showSplash), returnValue: false)
          as bool);
  @override
  set showSplash(bool? value) =>
      super.noSuchMethod(Invocation.setter(#showSplash, value),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> onURLPress(String? url) =>
      (super.noSuchMethod(Invocation.method(#onURLPress, [url]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void addListener(_i5.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i5.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
